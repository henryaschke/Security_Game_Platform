name: 🛡️ DevSecOps CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

permissions:
  contents: read
  security-events: write
  actions: read
  checks: write
  pull-requests: write

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # 🔍 STAGE 1: Security Analysis
  security-analysis:
    name: 🔍 Security Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install bandit safety

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Node Dependencies
        run: |
          npm ci
          npm install eslint eslint-plugin-security --save-dev

      - name: 🔧 Create Reports Directory
        run: mkdir -p reports

      - name: 🛡️ Trivy Vulnerability Scanner
        run: |
          docker run --rm -v "${{ github.workspace }}:/workspace" \
            aquasec/trivy:latest fs /workspace \
            --format sarif --output /workspace/trivy-results.sarif || echo "Trivy scan completed"
          
          # Ensure file exists for upload
          if [ ! -f "trivy-results.sarif" ]; then
            echo '{"version":"2.1.0","runs":[]}' > trivy-results.sarif
          fi
          cp trivy-results.sarif reports/

      - name: 🐍 Python Security (Bandit)
        run: |
          bandit -r . -f json -o reports/bandit-report.json || echo "Bandit completed"
          bandit -r . || echo "Bandit found issues"

      - name: 🔐 Python Dependencies (Safety)
        run: |
          safety check --json --output reports/safety-report.json || echo "Safety completed"
          safety check || echo "Safety found issues"

      - name: 🟨 JavaScript Security (ESLint)
        run: |
          npx eslint *.js --format json --output-file reports/eslint-report.json || echo "ESLint completed"
          npx eslint *.js || echo "ESLint found issues"

      - name: 🔍 CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, python
        continue-on-error: true

      - name: 🔍 CodeQL Autobuild
        uses: github/codeql-action/autobuild@v3
        continue-on-error: true

      - name: 🔍 CodeQL Results
        uses: github/codeql-action/analyze@v3
        continue-on-error: true

      - name: 📊 Upload Trivy SARIF
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

      - name: 📋 List Reports
        run: |
          echo "Generated reports:"
          ls -la reports/
          echo "Report contents:"
          find reports/ -type f -exec echo "File: {}" \; -exec head -3 {} \; || echo "No reports found"

      - name: 📋 Upload Security Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: reports/
          if-no-files-found: warn

  # 🧪 STAGE 2: Test Suite
  test-suite:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    needs: security-analysis
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 🔧 Setup Test Environment
        run: |
          export PYTHONPATH="${{ github.workspace }}"
          export TESTING=true
          mkdir -p test-results

      - name: 🔍 Validate Imports
        run: |
          python -c "import game_server; print('✅ game_server imports OK')"
          python -c "import test_config; print('✅ test_config imports OK')" || echo "⚠️ test_config optional"

      - name: 🧪 Run Tests
        run: |
          PYTHONPATH="${{ github.workspace }}" TESTING=true python -m pytest test_game_server.py -v \
            --cov=game_server \
            --cov-report=html:test-results/coverage \
            --cov-report=xml:test-results/coverage.xml \
            --html=test-results/report.html \
            --json-report --json-report-file=test-results/results.json

      - name: 📈 Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: test-results/
          if-no-files-found: warn

  # 🏗️ STAGE 3: Build Application
  build-application:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: test-suite
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Build Package
        run: |
          mkdir -p dist/
          
          # Copy Python files
          cp *.py dist/
          
          # Copy web files
          cp *.html dist/ || echo "No HTML files"
          cp *.css dist/ || echo "No CSS files"  
          cp *.js dist/ || echo "No JS files"
          
          # Copy config files
          cp requirements.txt dist/
          cp app.yaml dist/
          
          # Create version info
          echo "BUILD_VERSION=$(date +%Y%m%d-%H%M%S)" > dist/version.txt
          echo "GIT_COMMIT=$(git rev-parse --short HEAD)" >> dist/version.txt

      - name: 🔍 Validate Build
        run: |
          cd dist/
          ls -la
          python -c "import sys; sys.path.insert(0, '.'); import game_server; print('✅ Build valid')"

      - name: 📦 Upload Build
        uses: actions/upload-artifact@v4
        with:
          name: application-build
          path: dist/

  # 🚀 STAGE 4: Deploy to Production
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: build-application
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: 📦 Download Build
        uses: actions/download-artifact@v4
        with:
          name: application-build
          path: dist/

      - name: 🔐 Setup GCP Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: ☁️ Setup GCP SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: '${{ secrets.GCP_PROJECT_ID }}'

      - name: 🚀 Deploy to App Engine
        run: |
          cd dist/
          gcloud app deploy app.yaml \
            --project=${{ secrets.GCP_PROJECT_ID }} \
            --version=v$(date +%Y%m%d-%H%M%S) \
            --promote \
            --quiet

      - name: 🏥 Health Check
        run: |
          sleep 30
          curl -f "https://${{ secrets.GCP_PROJECT_ID }}.appspot.com/health"
          echo "✅ Deployment successful!"

      - name: 📝 Summary
        run: |
          echo "🎉 Production URL: https://${{ secrets.GCP_PROJECT_ID }}.appspot.com"

  # 🔐 STAGE 5: Security Monitoring
  security-monitoring:
    name: 🔐 Security Monitoring
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: 🌐 SSL/Security Check
        run: |
          echo "🔐 Checking SSL and security headers..."
          curl -I "https://${{ secrets.GCP_PROJECT_ID }}.appspot.com" | grep -E "(X-Frame-Options|X-Content-Type-Options|Strict-Transport-Security)" || echo "Headers checked"

      - name: 📊 Performance Test
        run: |
          echo "⚡ Testing performance..."
          for i in {1..3}; do
            start=$(date +%s%N)
            curl -f "https://${{ secrets.GCP_PROJECT_ID }}.appspot.com/health"
            end=$(date +%s%N)
            duration=$(( (end - start) / 1000000 ))
            echo "Health check $i: ${duration}ms"
          done

      - name: 🎯 Final Summary
        run: |
          echo "🛡️ Security monitoring complete!"
          echo "🔗 Production: https://${{ secrets.GCP_PROJECT_ID }}.appspot.com" 