name: 🛡️ DevSecOps CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

permissions:
  contents: read
  security-events: write
  actions: read
  checks: write
  pull-requests: write

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # 🔍 STAGE 1: Security Analysis (5-7 min)
  security-analysis:
    name: 🔍 Security Analysis
    runs-on: ubuntu-latest
    continue-on-error: false
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Install dependencies first
      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'

      - name: 📦 Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install bandit safety
        continue-on-error: false

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: 📦 Install Node Dependencies
        run: |
          npm ci --ignore-scripts || npm install --ignore-scripts
          npm install eslint eslint-plugin-security --save-dev
        continue-on-error: true

      # Security Scans
      - name: 🛡️ Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true

      - name: 📊 Upload Trivy Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

      - name: 🐍 Python Security Check (Bandit)
        run: |
          bandit -r . -f json -o bandit-report.json || true
          bandit -r . || true
        continue-on-error: true

      - name: 🔐 Python Dependency Check (Safety)
        run: |
          safety check --json --output safety-report.json || true
          safety check || true
        continue-on-error: true

      - name: 🟨 JavaScript Security Linting
        run: |
          if [ -f "package.json" ]; then
            npx eslint *.js --format json --output-file eslint-report.json || true
            npx eslint *.js || true
          fi
        continue-on-error: true

      - name: 🔍 CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, python
        continue-on-error: true

      - name: 🔍 CodeQL Autobuild
        uses: github/codeql-action/autobuild@v3
        continue-on-error: true

      - name: 🔍 CodeQL Analysis Results
        uses: github/codeql-action/analyze@v3
        continue-on-error: true

  # 🧪 STAGE 2: Test Suite (3-5 min)
  test-suite:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    needs: security-analysis
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'

      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-html pytest-json-report

      - name: 🔧 Create Test Environment
        run: |
          export TESTING=True
          export SECRET_KEY=test-secret-key
          mkdir -p test_results

      - name: 🧪 Run Security Tests
        run: |
          python -m pytest test_game_server.py::TestSecurityHeaders -v \
            --html=test_results/security_report.html \
            --json-report --json-report-file=test_results/security_results.json
        continue-on-error: false

      - name: 🌐 Run API Tests
        run: |
          python -m pytest test_game_server.py::TestAPIEndpoints -v \
            --html=test_results/api_report.html \
            --json-report --json-report-file=test_results/api_results.json
        continue-on-error: false

      - name: 🔒 Run Input Validation Tests
        run: |
          python -m pytest test_game_server.py::TestInputValidation -v \
            --html=test_results/validation_report.html \
            --json-report --json-report-file=test_results/validation_results.json
        continue-on-error: false

      - name: ⚡ Run Performance Tests
        run: |
          python -m pytest test_game_server.py::TestPerformance -v \
            --html=test_results/performance_report.html \
            --json-report --json-report-file=test_results/performance_results.json
        continue-on-error: false

      - name: 🚨 Run Error Handling Tests
        run: |
          python -m pytest test_game_server.py::TestErrorHandling -v \
            --html=test_results/error_report.html \
            --json-report --json-report-file=test_results/error_results.json
        continue-on-error: false

      - name: 📊 Generate Coverage Report
        run: |
          python -m pytest test_game_server.py --cov=game_server \
            --cov-report=html:test_results/coverage_html \
            --cov-report=xml:test_results/coverage.xml
        continue-on-error: true

      - name: 📈 Upload Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: test_results/

  # 🏗️ STAGE 3: Build Application (2-3 min)
  build-application:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: test-suite
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 🔧 Build Application Package
        run: |
          # Create distribution directory
          mkdir -p dist/
          
          # Copy application files
          cp *.html dist/
          cp *.css dist/
          cp *.js dist/
          cp *.py dist/
          cp requirements.txt dist/
          cp app.yaml dist/
          cp app-staging.yaml dist/
          
          # Create version file
          echo "BUILD_VERSION=$(date +%Y%m%d-%H%M%S)" > dist/version.txt
          echo "GIT_COMMIT=$(git rev-parse --short HEAD)" >> dist/version.txt

      - name: 🔍 Validate Build
        run: |
          cd dist/
          ls -la
          python -c "import game_server; print('✅ Game server imports successfully')"

      - name: 📦 Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: application-build
          path: dist/

  # 🚀 STAGE 4: Deploy to Production (5-8 min)
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: build-application
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: application-build
          path: dist/

      - name: 🔐 Setup GCP Authentication
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: ☁️ Setup GCP SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: '${{ secrets.GCP_PROJECT_ID }}'

      - name: 🚀 Deploy to App Engine
        run: |
          cd dist/
          
          # Deploy to production
          gcloud app deploy app.yaml \
            --project=${{ secrets.GCP_PROJECT_ID }} \
            --version=v$(date +%Y%m%d-%H%M%S) \
            --promote \
            --quiet

      - name: 🏥 Health Check
        run: |
          sleep 30
          curl -f https://${{ secrets.GCP_PROJECT_ID }}.appspot.com/health || exit 1
          echo "✅ Production deployment successful!"

      - name: 📝 Deployment Summary
        run: |
          echo "🎉 Production Deployment Complete!"
          echo "🌐 URL: https://${{ secrets.GCP_PROJECT_ID }}.appspot.com"
          echo "📊 Health: https://${{ secrets.GCP_PROJECT_ID }}.appspot.com/health"

  # 🔐 STAGE 5: Post-Deployment Security Monitoring (3-5 min)
  security-monitoring:
    name: 🔐 Security Monitoring
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 OWASP ZAP Security Scan
        uses: zaproxy/action-full-scan@v0.8.0
        with:
          target: 'https://${{ secrets.GCP_PROJECT_ID }}.appspot.com'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'
        continue-on-error: true

      - name: 🌐 SSL/TLS Security Check
        run: |
          # Check SSL certificate
          echo "🔐 Checking SSL configuration..."
          
          # Test HTTPS redirect
          curl -I http://${{ secrets.GCP_PROJECT_ID }}.appspot.com || true
          
          # Test HTTPS response
          curl -I https://${{ secrets.GCP_PROJECT_ID }}.appspot.com || true
          
          # Test security headers
          curl -I https://${{ secrets.GCP_PROJECT_ID }}.appspot.com | grep -E "(X-Frame-Options|X-Content-Type-Options|Strict-Transport-Security)"

      - name: 📊 Performance & Availability Test
        run: |
          echo "⚡ Testing application performance..."
          
          for i in {1..5}; do
            start_time=$(date +%s%N)
            curl -f https://${{ secrets.GCP_PROJECT_ID }}.appspot.com/health
            end_time=$(date +%s%N)
            duration=$(( (end_time - start_time) / 1000000 ))
            echo "Request $i: ${duration}ms"
          done

      - name: 🎯 Final Security Summary
        run: |
          echo "🛡️ Post-Deployment Security Check Complete!"
          echo "✅ Application deployed and secured"
          echo "🔗 Production URL: https://${{ secrets.GCP_PROJECT_ID }}.appspot.com" 